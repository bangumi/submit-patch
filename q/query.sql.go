// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package q

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countSubjectPatchesByStates = `-- name: CountSubjectPatchesByStates :one
select count(1)
from subject_patch
where deleted_at is null
  and state = any ($1::int[])
`

func (q *Queries) CountSubjectPatchesByStates(ctx context.Context, dollar_1 []int32) (int64, error) {
	row := q.db.QueryRow(ctx, countSubjectPatchesByStates, dollar_1)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getEpisodePatch = `-- name: GetEpisodePatch :one
SELECT id, episode_id, state, from_user_id, wiki_user_id, reason, original_name, name, original_name_cn, name_cn, original_duration, duration, original_airdate, airdate, original_description, description, created_at, updated_at, deleted_at, reject_reason, comments_count, patch_desc, ep
FROM episode_patch
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetEpisodePatch(ctx context.Context, id pgtype.UUID) (EpisodePatch, error) {
	row := q.db.QueryRow(ctx, getEpisodePatch, id)
	var i EpisodePatch
	err := row.Scan(
		&i.ID,
		&i.EpisodeID,
		&i.State,
		&i.FromUserID,
		&i.WikiUserID,
		&i.Reason,
		&i.OriginalName,
		&i.Name,
		&i.OriginalNameCn,
		&i.NameCn,
		&i.OriginalDuration,
		&i.Duration,
		&i.OriginalAirdate,
		&i.Airdate,
		&i.OriginalDescription,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.RejectReason,
		&i.CommentsCount,
		&i.PatchDesc,
		&i.Ep,
	)
	return i, err
}

const listSubjectPatchesByStates = `-- name: ListSubjectPatchesByStates :many
select id, subject_id, state, from_user_id, wiki_user_id, reason, name, original_name, infobox, original_infobox, summary, original_summary, nsfw, created_at, updated_at, deleted_at, reject_reason, subject_type, comments_count, patch_desc, original_platform, platform, action
from subject_patch
where deleted_at is null
  and state = any ($1::int[])
order by created_at desc
limit $3::int8 offset $2::int8
`

type ListSubjectPatchesByStatesParams struct {
	State []int32
	Skip  int64
	Size  int64
}

func (q *Queries) ListSubjectPatchesByStates(ctx context.Context, arg ListSubjectPatchesByStatesParams) ([]SubjectPatch, error) {
	rows, err := q.db.Query(ctx, listSubjectPatchesByStates, arg.State, arg.Skip, arg.Size)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SubjectPatch
	for rows.Next() {
		var i SubjectPatch
		if err := rows.Scan(
			&i.ID,
			&i.SubjectID,
			&i.State,
			&i.FromUserID,
			&i.WikiUserID,
			&i.Reason,
			&i.Name,
			&i.OriginalName,
			&i.Infobox,
			&i.OriginalInfobox,
			&i.Summary,
			&i.OriginalSummary,
			&i.Nsfw,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.RejectReason,
			&i.SubjectType,
			&i.CommentsCount,
			&i.PatchDesc,
			&i.OriginalPlatform,
			&i.Platform,
			&i.Action,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const upsertUser = `-- name: UpsertUser :exec
insert into patch_users (user_id, username, nickname)
VALUES ($1, $2, $3)
on conflict (user_id) do update set username = excluded.username,
                                    nickname = excluded.nickname
`

type UpsertUserParams struct {
	UserID   int32
	Username string
	Nickname string
}

func (q *Queries) UpsertUser(ctx context.Context, arg UpsertUserParams) error {
	_, err := q.db.Exec(ctx, upsertUser, arg.UserID, arg.Username, arg.Nickname)
	return err
}
