package templates

import (
	"app/q"
	"app/view"
	"fmt"
	"time"
)

templ EpisodePatchPage(
	csrfToken string,
	user *view.CurrentUser,
	patch q.EpisodePatch,
	author q.PatchUser,
	reviewer *q.PatchUser,
	comments []q.GetCommentsRow,
	changes []view.Change,
) {
	@Layout(
		"",
		patchDetailHead(),
		episodePatchDetailContent(csrfToken, user, patch, author, reviewer, comments, changes),
	)
}

templ episodePatchDetailContent(
	csrfToken string,
	user *view.CurrentUser,
	patch q.EpisodePatch,
	author q.PatchUser,
	reviewer *q.PatchUser,
	comments []q.GetCommentsRow,
	changes []view.Change,
) {
	@header("", user)
	<div class="row">
		<div class="col">
			if patch.EpisodeID != 0 {
				<a href={ templ.SafeURL(fmt.Sprintf("https://bgm.tv/ep/%d", patch.EpisodeID)) } target="_blank" rel="noopener">
					<h3>条目链接</h3>
				</a>
			} else {
				<h3>创建新条目</h3>
			}
		</div>
		<div class="col">
			<h3>
				提交者:
				<a
					href={ templ.SafeURL(fmt.Sprintf("/contrib/%d", patch.FromUserID)) }
					target="_blank"
					rel="noopener"
				>
					{ author.Username }
				</a>
			</h3>
		</div>
	</div>
	<div class="row mb-2 p-2">
		提交时间: { time.Since(patch.CreatedAt.Time).Truncate(time.Second).String() } ago
		({ user.LocalTime(patch.CreatedAt.Time) })
		<br/>
		修改时间: { time.Since(patch.UpdatedAt.Time).Truncate(time.Second).String() } ago
		({ user.LocalTime(patch.UpdatedAt.Time) })
	</div>
	if len(comments) > 0 {
		<div class="row mb-2">
			<ul class="list-group">
				for _, c := range comments {
					@Comment(user, c)
				}
			</ul>
		</div>
	}
	if patch.State == 0 {
		if patch.FromUserID == user.UserID {
			<div class="row mb-2">
				<form
					action={ templ.SafeURL(fmt.Sprintf("/edit/patch/episode/%s", patch.ID)) }
					method="get"
					class="col"
				>
					<button type="submit" class="btn btn-success">Edit</button>
				</form>
				<form
					action={ templ.SafeURL(fmt.Sprintf("/api/delete/patch/episode/%s", patch.ID)) }
					method="post"
					class="col"
				>
					<input type="hidden" name="x-csrf-token" value={ csrfToken }/>
					<button type="submit" class="btn btn-danger">Delete</button>
				</form>
			</div>
			<hr/>
		}
	} else if patch.State == 1 {
		<hr/>
		<div class="col">
			<h2>
				已被
				<a
					href={ templ.SafeURL(fmt.Sprintf("/review/%d", patch.WikiUserID)) }
					target="_blank"
				>
					{ reviewer.Username }
				</a>
				<span class="badge bg-success">接受 </span>
			</h2>
			<hr/>
		</div>
	} else if patch.State == 2 {
		<div class="col">
			<h3>
				已被
				<a
					href={ templ.SafeURL(fmt.Sprintf("/review/%d", patch.WikiUserID)) }
					target="_blank"
				>
					{ reviewer.Username }
				</a>
				<span class="badge bg-danger">拒绝 </span>
			</h3>
			if patch.RejectReason != "" {
				<h4>原因：{ patch.RejectReason }</h4>
			}
			<hr/>
		</div>
	} else if patch.State == 3 {
		<div class="col">
			<h2>已过期</h2>
			<pre
				style="overflow: visible; overflow-wrap: anywhere; white-space: pre-wrap;background-color: #f7f7f9"
			>
				<code>
					{ patch.RejectReason }
				</code>
			</pre>
			<hr/>
		</div>
	}
	<div class="row mb-2">
		<h2>修改原因</h2>
		<blockquote class="blockquote" style="background-color: #f7f7f9">
			<p
				class="mb-0"
				style="overflow: visible; overflow-wrap: anywhere; white-space: pre-wrap"
			>
				@templ.Raw(AutoURL(patch.Reason))
			</p>
		</blockquote>
	</div>
	if patch.PatchDesc != "" {
		<div class="row mb-2">
			<h2>说明</h2>
			<blockquote class="blockquote" style="background-color: #f7f7f9">
				<p
					class="mb-0"
					style="overflow: visible; overflow-wrap: anywhere; white-space: pre-wrap"
				>
					@templ.Raw(AutoURL(patch.PatchDesc))
				</p>
			</blockquote>
		</div>
	}
	<h2>具体变动</h2>
	for _, change := range changes {
		<div class="row mb-4">
			<div id={ change.Name + "DiffElement" } data-diff={ templ.JSONString(change.Diff) }></div>
		</div>
		<script>
      (() => {
        const targetElement = document.getElementById('{{ change.Name }}DiffElement');
        const diffString = JSON.parse(targetElement.getAttribute('data-diff'));;
        const configuration = {
          drawFileList: false,
          fileListToggle: false,
          fileListStartVisible: false,
          maxLineSizeInBlockForComparison: 80,
          fileContentToggle: false,
          matching: 'words',
          outputFormat: isMobile ? 'line-by-line' : 'side-by-side',
          synchronisedScroll: true,
          renderNothingWhenEmpty: false,
        };
        const diff2htmlUi = new Diff2HtmlUI(targetElement, diffString, configuration);
        diff2htmlUi.draw();
      })()
    </script>
	}
	// if patch.Nsfw.Valid {
	// 	<div class="row mb-4">
	// 		if patch.Action.Int32 == 1 {
	// 			if patch.Nsfw.Bool {
	// 				<p>NSFW: ❌ -> ✅</p>
	// 			} else {
	// 				<p>NSFW: ✅ -> ❌</p>
	// 			}
	// 		} else {
	// 			if patch.Nsfw.Bool {
	// 				<p>NSFW: ✅</p>
	// 			} else {
	// 				<p>NSFW: ❌</p>
	// 			}
	// 		}
	// 	</div>
	// }
	if patch.State == 0 {
		@review("episode", user, patch.ID.String(), csrfToken)
	}
}
