package templates

import (
	"fmt"
	"time"

	"app/dal"
	"app/internal/diff"
	"app/view"
)

templ EpisodePatchPage(
	csrfToken string,
	user *view.CurrentUser,
	patch dal.EpisodePatch,
	author dal.PatchUser,
	reviewer *dal.PatchUser,
	comments []dal.GetCommentsRow,
) {
	@Layout(
		"",
		patchDetailHead(),
		episodePatchDetailContent(
			csrfToken,
			user,
			patch,
			author,
			reviewer,
			comments,
			time.Now(),
		),
	)
}

templ episodePatchDetailContent(
	csrfToken string,
	user *view.CurrentUser,
	patch dal.EpisodePatch,
	author dal.PatchUser,
	reviewer *dal.PatchUser,
	comments []dal.GetCommentsRow,
	now time.Time,
) {
	@header("", user)
	<div class="row">
		<div class="col">
			if patch.EpisodeID != 0 {
				<a href={ templ.SafeURL(fmt.Sprintf("https://bgm.tv/ep/%d", patch.EpisodeID)) } target="_blank" rel="noopener">
					<h3>条目链接</h3>
				</a>
			} else {
				<h3>创建新条目</h3>
			}
		</div>
		<div class="col">
			<h3>
				提交者:
				<a
					href={ templ.SafeURL(fmt.Sprintf("/contrib/%d", patch.FromUserID)) }
					target="_blank"
					rel="noopener"
				>
					{ author.Username }
				</a>
			</h3>
		</div>
	</div>
	<div class="row mb-2 p-2">
		提交时间: { relativeTime(now, patch.CreatedAt.Time) }
		({ user.LocalTime(patch.CreatedAt.Time) })
		<br/>
		修改时间: { relativeTime(now, patch.UpdatedAt.Time) }
		({ user.LocalTime(patch.UpdatedAt.Time) })
	</div>
	if len(comments) > 0 {
		<div class="row mb-2">
			<ul class="list-group ps-2 pe-2">
				for _, c := range comments {
					@Comment(user, c)
				}
			</ul>
		</div>
	}
	if patch.State == 0 {
		if patch.FromUserID == user.UserID {
			<div class="row mb-2">
				<form
					action={ templ.SafeURL(fmt.Sprintf("/edit/patch/episode/%s", patch.ID)) }
					method="get"
					class="col"
				>
					<button type="submit" class="btn btn-success">Edit</button>
				</form>
				<form
					action={ templ.SafeURL(fmt.Sprintf("/api/delete/patch/episode/%s", patch.ID)) }
					method="post"
					class="col"
				>
					<input type="hidden" name="x-csrf-token" value={ csrfToken }/>
					<button type="submit" class="btn btn-danger">Delete</button>
				</form>
			</div>
			<hr/>
		}
	} else if patch.State == 1 {
		<hr/>
		<div class="col">
			<h2>
				已被
				<a
					href={ templ.SafeURL(fmt.Sprintf("/review/%d", patch.WikiUserID)) }
					target="_blank"
				>
					{ reviewer.Username }
				</a>
				<span class="badge bg-success">接受 </span>
			</h2>
			<hr/>
		</div>
	} else if patch.State == 2 {
		<div class="col">
			<h3>
				已被
				<a
					href={ templ.SafeURL(fmt.Sprintf("/review/%d", patch.WikiUserID)) }
					target="_blank"
				>
					{ reviewer.Username }
				</a>
				<span class="badge bg-danger">拒绝 </span>
			</h3>
			if patch.RejectReason != "" {
				<h4>原因：{ patch.RejectReason }</h4>
			}
			<hr/>
		</div>
	} else if patch.State == 3 {
		<div class="col">
			<h2>已过期</h2>
			<pre
				style="overflow: visible; overflow-wrap: anywhere; white-space: pre-wrap;background-color: #f7f7f9"
			>
				<code>
					{ patch.RejectReason }
				</code>
			</pre>
			<hr/>
		</div>
	}
	<div class="row mb-2">
		<h2>修改原因</h2>
		<blockquote class="blockquote" style="background-color: #f7f7f9">
			<p
				class="mb-0"
				style="overflow: visible; overflow-wrap: anywhere; white-space: pre-wrap"
			>
				@templ.Raw(AutoURL(patch.Reason))
			</p>
		</blockquote>
	</div>
	if patch.PatchDesc != "" {
		<div class="row mb-2">
			<h2>说明</h2>
			<blockquote class="blockquote" style="background-color: #f7f7f9">
				<p
					class="mb-0"
					style="overflow: visible; overflow-wrap: anywhere; white-space: pre-wrap"
				>
					@templ.Raw(AutoURL(patch.PatchDesc))
				</p>
			</blockquote>
		</div>
	}
	<div class="row mb-2"><h2>具体变动</h2></div>
	if patch.OriginalName.String == patch.Name.String {
		if patch.OriginalName.String != "" {
			<div class="row mb-0">
				<h5>标题</h5>
			</div>
			<div class="row mb-4">
				<blockquote class="blockquote" style="background-color: #f7f7f9">
					<p class="mb-0" style="overflow: visible; overflow-wrap: anywhere; white-space: pre-wrap">{ patch.OriginalName.String }</p>
				</blockquote>
			</div>
		}
	} else {
		<div class="row mb-4">
			<div
				id="nameDiffElement"
				data-diff={ templ.JSONString(diff.Diff("标题", patch.OriginalName.String, patch.Name.String)) }
			></div>
			<script>
	     (() => {
	       const targetElement = document.getElementById('nameDiffElement');
	       const diffString = JSON.parse(targetElement.getAttribute('data-diff'));;
	       const configuration = {
	         drawFileList: false,
	         fileListToggle: false,
	         fileListStartVisible: false,
	         maxLineSizeInBlockForComparison: 80,
	         fileContentToggle: false,
	         matching: 'words',
	         outputFormat: isMobile ? 'line-by-line' : 'side-by-side',
	         synchronisedScroll: true,
	         renderNothingWhenEmpty: false,
	       };
	       const diff2htmlUi = new Diff2HtmlUI(targetElement, diffString, configuration);
	       diff2htmlUi.draw();
	     })()
	   </script>
		</div>
	}
	if patch.OriginalNameCn.String == patch.NameCn.String {
		if patch.OriginalNameCn.String != "" {
			<div class="row mb-0">
				<h5>中文标题</h5>
			</div>
			<div class="row mb-4">
				<blockquote class="blockquote" style="background-color: #f7f7f9">
					<p class="mb-0" style="overflow: visible; overflow-wrap: anywhere; white-space: pre-wrap">{ patch.OriginalNameCn.String }</p>
				</blockquote>
			</div>
		}
	} else {
		<div class="row mb-4">
			<div
				id="nameCnDiffElement"
				data-diff={ templ.JSONString(diff.Diff("中文标题", patch.OriginalNameCn.String, patch.NameCn.String)) }
			></div>
			<script>
	     (() => {
	       const targetElement = document.getElementById('nameCnDiffElement');
	       const diffString = JSON.parse(targetElement.getAttribute('data-diff'));;
	       const configuration = {
	         drawFileList: false,
	         fileListToggle: false,
	         fileListStartVisible: false,
	         maxLineSizeInBlockForComparison: 80,
	         fileContentToggle: false,
	         matching: 'words',
	         outputFormat: isMobile ? 'line-by-line' : 'side-by-side',
	         synchronisedScroll: true,
	         renderNothingWhenEmpty: false,
	       };
	       const diff2htmlUi = new Diff2HtmlUI(targetElement, diffString, configuration);
	       diff2htmlUi.draw();
	     })()
	   </script>
		</div>
	}
	if patch.OriginalDuration.String == patch.Duration.String {
		if patch.OriginalDuration.String != "" {
			<div class="row mb-0">
				<h5>时长</h5>
			</div>
			<div class="row mb-4">
				<blockquote class="blockquote" style="background-color: #f7f7f9">
					<p class="mb-0" style="overflow: visible; overflow-wrap: anywhere; white-space: pre-wrap">
						{ patch.OriginalDuration.String }
					</p>
				</blockquote>
			</div>
		}
	} else {
		<div class="row mb-4">
			<div
				id="durationDiffElement"
				data-diff={ templ.JSONString(diff.Diff("时长", patch.OriginalDuration.String, patch.Duration.String)) }
			></div>
			<script>
	     (() => {
	       const targetElement = document.getElementById('durationDiffElement');
	       const diffString = JSON.parse(targetElement.getAttribute('data-diff'));;
	       const configuration = {
	         drawFileList: false,
	         fileListToggle: false,
	         fileListStartVisible: false,
	         maxLineSizeInBlockForComparison: 80,
	         fileContentToggle: false,
	         matching: 'words',
	         outputFormat: isMobile ? 'line-by-line' : 'side-by-side',
	         synchronisedScroll: true,
	         renderNothingWhenEmpty: false,
	       };
	       const diff2htmlUi = new Diff2HtmlUI(targetElement, diffString, configuration);
	       diff2htmlUi.draw();
	     })()
	   </script>
		</div>
	}
	if patch.OriginalAirdate.String == patch.Airdate.String {
		if patch.OriginalAirdate.String != "" {
			<div class="row mb-0">
				<h5>播出时间</h5>
			</div>
			<div class="row mb-4">
				<blockquote class="blockquote" style="background-color: #f7f7f9">
					<p class="mb-0" style="overflow: visible; overflow-wrap: anywhere; white-space: pre-wrap">
						{ patch.OriginalAirdate.String }
					</p>
				</blockquote>
			</div>
		}
	} else {
		<div class="row mb-4">
			<div
				id="airdateDiffElement"
				data-diff={ templ.JSONString(diff.Diff("播出时间", patch.OriginalAirdate.String, patch.Airdate.String)) }
			></div>
			<script>
	     (() => {
	       const targetElement = document.getElementById('airdateDiffElement');
	       const diffString = JSON.parse(targetElement.getAttribute('data-diff'));;
	       const configuration = {
	         drawFileList: false,
	         fileListToggle: false,
	         fileListStartVisible: false,
	         maxLineSizeInBlockForComparison: 80,
	         fileContentToggle: false,
	         matching: 'words',
	         outputFormat: isMobile ? 'line-by-line' : 'side-by-side',
	         synchronisedScroll: true,
	         renderNothingWhenEmpty: false,
	       };
	       const diff2htmlUi = new Diff2HtmlUI(targetElement, diffString, configuration);
	       diff2htmlUi.draw();
	     })()
	   </script>
		</div>
	}
	if patch.OriginalDescription.String == patch.Description.String {
		if patch.Description.String != "" {
			<div class="row mb-0">
				<h5>简介</h5>
			</div>
			<div class="row mb-4">
				<blockquote class="blockquote" style="background-color: #f7f7f9">
					<p class="mb-0" style="overflow: visible; overflow-wrap: anywhere; white-space: pre-wrap">
						{ patch.OriginalDescription.String }
					</p>
				</blockquote>
			</div>
		}
	} else {
		<div class="row mb-4">
			<div
				id="descriptionDiffElement"
				data-diff={ templ.JSONString(diff.Diff("简介", patch.OriginalDescription.String, patch.Description.String)) }
			></div>
			<script>
	     (() => {
	       const targetElement = document.getElementById('descriptionDiffElement');
	       const diffString = JSON.parse(targetElement.getAttribute('data-diff'));;
	       const configuration = {
	         drawFileList: false,
	         fileListToggle: false,
	         fileListStartVisible: false,
	         maxLineSizeInBlockForComparison: 80,
	         fileContentToggle: false,
	         matching: 'words',
	         outputFormat: isMobile ? 'line-by-line' : 'side-by-side',
	         synchronisedScroll: true,
	         renderNothingWhenEmpty: false,
	       };
	       const diff2htmlUi = new Diff2HtmlUI(targetElement, diffString, configuration);
	       diff2htmlUi.draw();
	     })()
	   </script>
		</div>
	}
	if patch.State == 0 {
		@review("episode", user, patch.ID.String(), csrfToken)
	}
}
