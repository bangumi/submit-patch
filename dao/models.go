// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package dao

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type PatchType string

const (
	PatchTypeSubject PatchType = "subject"
	PatchTypeEpisode PatchType = "episode"
)

func (e *PatchType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PatchType(s)
	case string:
		*e = PatchType(s)
	default:
		return fmt.Errorf("unsupported scan type for PatchType: %T", src)
	}
	return nil
}

type NullPatchType struct {
	PatchType PatchType
	Valid     bool // Valid is true if PatchType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPatchType) Scan(value interface{}) error {
	if value == nil {
		ns.PatchType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PatchType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPatchType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PatchType), nil
}

type EditSuggestion struct {
	ID        pgtype.UUID
	PatchID   pgtype.UUID
	PatchType PatchType
	Text      string
	FromUser  int32
	CreatedAt pgtype.Timestamptz
	DeletedAt pgtype.Timestamptz
}

type EpisodePatch struct {
	ID                  pgtype.UUID
	EpisodeID           int32
	State               int32
	FromUserID          int32
	WikiUserID          int32
	Reason              string
	OriginalName        pgtype.Text
	Name                pgtype.Text
	OriginalNameCn      pgtype.Text
	NameCn              pgtype.Text
	OriginalDuration    pgtype.Text
	Duration            pgtype.Text
	OriginalAirdate     pgtype.Text
	Airdate             pgtype.Text
	OriginalDescription pgtype.Text
	Description         pgtype.Text
	CreatedAt           pgtype.Timestamptz
	UpdatedAt           pgtype.Timestamptz
	DeletedAt           pgtype.Timestamptz
	RejectReason        string
	CommentsCount       int32
	PatchDesc           string
	Ep                  pgtype.Int4
}

type PatchUser struct {
	UserID   int32
	Username string
	Nickname string
}

type SubjectPatch struct {
	ID               pgtype.UUID
	SubjectID        int32
	State            int32
	FromUserID       int32
	WikiUserID       int32
	Reason           string
	Name             pgtype.Text
	OriginalName     string
	Infobox          pgtype.Text
	OriginalInfobox  pgtype.Text
	Summary          pgtype.Text
	OriginalSummary  pgtype.Text
	Nsfw             pgtype.Bool
	CreatedAt        pgtype.Timestamptz
	UpdatedAt        pgtype.Timestamptz
	DeletedAt        pgtype.Timestamptz
	RejectReason     string
	SubjectType      int64
	CommentsCount    int32
	PatchDesc        string
	OriginalPlatform pgtype.Int4
	Platform         pgtype.Int4
	// 1 for update 2 for create
	Action pgtype.Int4
}

type ViewEpisodePatch struct {
	ID                  pgtype.UUID
	EpisodeID           int32
	State               int32
	FromUserID          int32
	WikiUserID          int32
	Reason              string
	OriginalName        pgtype.Text
	Name                pgtype.Text
	OriginalNameCn      pgtype.Text
	NameCn              pgtype.Text
	OriginalDuration    pgtype.Text
	Duration            pgtype.Text
	OriginalAirdate     pgtype.Text
	Airdate             pgtype.Text
	OriginalDescription pgtype.Text
	Description         pgtype.Text
	CreatedAt           pgtype.Timestamptz
	UpdatedAt           pgtype.Timestamptz
	DeletedAt           pgtype.Timestamptz
	RejectReason        string
}

type ViewSubjectPatch struct {
	ID              pgtype.UUID
	SubjectID       int32
	State           int32
	FromUserID      int32
	WikiUserID      int32
	Reason          string
	Name            pgtype.Text
	OriginalName    string
	Infobox         pgtype.Text
	OriginalInfobox pgtype.Text
	Summary         pgtype.Text
	OriginalSummary pgtype.Text
	Nsfw            pgtype.Bool
	CreatedAt       pgtype.Timestamptz
	UpdatedAt       pgtype.Timestamptz
	DeletedAt       pgtype.Timestamptz
	RejectReason    string
	SubjectType     int64
}
